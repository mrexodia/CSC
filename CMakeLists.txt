# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr and automatically regenerate CMakeLists.txt
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)

	# Create a configure-time dependency on cmake.toml to improve IDE support
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

project(CSC)

# Target: CSC
set(CSC_SOURCES
	"src/codegen/codegen.cpp"
	"src/codegen/llvm.cpp"
	"src/compiler.cpp"
	"src/irbuilder/basicblock.cpp"
	"src/irbuilder/controlflowgraph.cpp"
	"src/irbuilder/irbuilder.cpp"
	"src/irbuilder/threeaddresscode.cpp"
	"src/lexer/assigntokens.cpp"
	"src/lexer/binoptokens.cpp"
	"src/lexer/bracetokens.cpp"
	"src/lexer/commenttoken.cpp"
	"src/lexer/datatypetokens.cpp"
	"src/lexer/equalitytokens.cpp"
	"src/lexer/fragment.cpp"
	"src/lexer/identtoken.cpp"
	"src/lexer/integertoken.cpp"
	"src/lexer/keywordtokens.cpp"
	"src/lexer/lexer.cpp"
	"src/lexer/logicaltokens.cpp"
	"src/lexer/parentokens.cpp"
	"src/lexer/position.cpp"
	"src/lexer/relationaltokens.cpp"
	"src/lexer/septokens.cpp"
	"src/lexer/token.cpp"
	"src/lexer/unknowntoken.cpp"
	"src/parser/argast.cpp"
	"src/parser/argslistast.cpp"
	"src/parser/assstmtast.cpp"
	"src/parser/ast.cpp"
	"src/parser/binexprast.cpp"
	"src/parser/compoundstmtast.cpp"
	"src/parser/datatypeast.cpp"
	"src/parser/declast.cpp"
	"src/parser/eqexprast.cpp"
	"src/parser/funcast.cpp"
	"src/parser/identast.cpp"
	"src/parser/ifstmtast.cpp"
	"src/parser/integerast.cpp"
	"src/parser/logicalexprast.cpp"
	"src/parser/loopstmtast.cpp"
	"src/parser/parser.cpp"
	"src/parser/parserexception.cpp"
	"src/parser/primaryexprast.cpp"
	"src/parser/relexprast.cpp"
	"src/parser/retstmtast.cpp"
	"src/parser/stmtast.cpp"
	"src/parser/unaryexprast.cpp"
	"src/parser/unitast.cpp"
	"src/getopt.c"
	"src/codegen/codegen.hpp"
	"src/codegen/llvm.hpp"
	"src/irbuilder/basicblock.hpp"
	"src/irbuilder/controlflowgraph.hpp"
	"src/irbuilder/irbuilder.hpp"
	"src/irbuilder/threeaddresscode.hpp"
	"src/lexer/assigntokens.hpp"
	"src/lexer/binoptokens.hpp"
	"src/lexer/bracetokens.hpp"
	"src/lexer/commenttoken.hpp"
	"src/lexer/datatypetokens.hpp"
	"src/lexer/domaintag.hpp"
	"src/lexer/equalitytokens.hpp"
	"src/lexer/fragment.hpp"
	"src/lexer/identtoken.hpp"
	"src/lexer/integertoken.hpp"
	"src/lexer/keywordtokens.hpp"
	"src/lexer/lexer.hpp"
	"src/lexer/logicaltokens.hpp"
	"src/lexer/parentokens.hpp"
	"src/lexer/position.hpp"
	"src/lexer/relationaltokens.hpp"
	"src/lexer/septokens.hpp"
	"src/lexer/token.hpp"
	"src/lexer/unknowntoken.hpp"
	"src/parser/argast.hpp"
	"src/parser/argslistast.hpp"
	"src/parser/assstmtast.hpp"
	"src/parser/ast.hpp"
	"src/parser/binexprast.hpp"
	"src/parser/compoundstmtast.hpp"
	"src/parser/datatypeast.hpp"
	"src/parser/declast.hpp"
	"src/parser/eqexprast.hpp"
	"src/parser/funcast.hpp"
	"src/parser/identast.hpp"
	"src/parser/ifstmtast.hpp"
	"src/parser/integerast.hpp"
	"src/parser/logicalexprast.hpp"
	"src/parser/loopstmtast.hpp"
	"src/parser/parser.hpp"
	"src/parser/parserexception.hpp"
	"src/parser/primaryexprast.hpp"
	"src/parser/relexprast.hpp"
	"src/parser/retstmtast.hpp"
	"src/parser/stmtast.hpp"
	"src/parser/typeast.hpp"
	"src/parser/unaryexprast.hpp"
	"src/parser/unitast.hpp"
	"src/getopt.h"
	cmake.toml
)

add_executable(CSC)

target_sources(CSC PRIVATE ${CSC_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${CSC_SOURCES})

target_include_directories(CSC PRIVATE
	src
	"src/codegen"
	"src/irbuilder"
	"src/lexer"
	"src/parser"
)

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT CSC)
endif()

